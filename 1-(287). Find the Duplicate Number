                       Brute Force:Simply,sort the array and check for adjacent element to be equal
                                       Time Complexity:O(nlogn)
                                      Space Complexity:O(1)
                       
                       
class Solution {
    public int findDuplicate(int[] nums) {
        int p=0;
        Arrays.sort(nums);
        for(int i=0;i<nums.length-1;i++)
        {
            if(nums[i]==nums[i+1])
            {
                p=nums[i];
            }
        }
    return p;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                 Using HashMap
                                                 
                                                 Time Complexity:O(n)
                                                 Space Complexity:O(n)
                                                 
         
         class Solution {
    public int findDuplicate(int[] nums) {
        int val=0;
        HashMap<Integer,Integer> hs=new HashMap<>();
        for(int i=0;i<nums.length;i++)
        {
            val=nums[i];
            if(hs.containsKey(val))
            {
                break;
            }
            else
            {
                hs.put(val,1);
            }
        }
        return val;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                               Using Tortoise Method
                                                Time Complexity:O(n)
                                               Space Complexity:O(1)
                                               
                                               
                                               
   class Solution {
    public int findDuplicate(int[] nums) {
        int slow=nums[0];
        int fast=nums[0];
        do{
            slow=nums[slow];
            fast=nums[nums[fast]];
        }while(slow!=fast);
        fast=nums[0];
        while(slow!=fast)
        {
            slow=nums[slow];
            fast=nums[fast];
        }
        return slow;
    }
}                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
