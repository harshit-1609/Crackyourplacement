

                                                     optimal approach:Sort the array,for loop for i=0 to n-1,another for loop for j=i+1 to n-1;
                                                                       left pointer ,right pointer
                                                                       Time Complexity:O(n^3)
                                                                       Space Complexity:O(1)


class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        ArrayList<List<Integer>> res=new ArrayList<List<Integer>>();
        if(nums==null || nums.length==0)
        {
            return res;
        }
        int n=nums.length;
        Arrays.sort(nums);
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                int target2=target-nums[i]-nums[j];
                int front=j+1;
                int back=n-1;
                while(front<back)
                {
                    int twosum=nums[front]+nums[back];
                    if(twosum<target2)
                    {
                        front++;
                    }
                    else if(twosum>target2)
                    {
                        back--;
                    }
                    else
                    {
                        List<Integer> quad=new ArrayList<>();
                        quad.add(nums[i]);
                        quad.add(nums[j]);
                        quad.add(nums[front]);
                        quad.add(nums[back]);
                        res.add(quad);
                        while(front<back && nums[front]==quad.get(2))
                          ++front;//processing the dublicates of 3rd number
                        while(front<back && nums[back]==quad.get(3))
                            --back;//processing the dublicates of 4th number
                    }
                }
                while(j+1<n && nums[j+1]==nums[j])
                
                    ++j;//Processing the dublicates of second number
                }
            while(i+1<n && nums[i+1]==nums[i])
                
                    ++i;//processing the dublicates of first number
            
                    }
        return res;
                }
            }
        
    
